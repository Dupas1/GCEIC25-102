<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="53" failures="0" errors="0" time="0.925">
  <testsuite name="API de Viagem - Cálculos (Equipe 2)" errors="0" failures="0" skipped="0" timestamp="2025-05-26T21:01:00" time="0.439" tests="5">
    <testcase classname="API de Viagem - Cálculos (Equipe 2) deve calcular o custo total de uma viagem para o Brasil em baixa temporada para 2 pessoas" name="API de Viagem - Cálculos (Equipe 2) deve calcular o custo total de uma viagem para o Brasil em baixa temporada para 2 pessoas" time="0.04">
    </testcase>
    <testcase classname="API de Viagem - Cálculos (Equipe 2) deve aplicar acréscimo de 20% para alta temporada" name="API de Viagem - Cálculos (Equipe 2) deve aplicar acréscimo de 20% para alta temporada" time="0.004">
    </testcase>
    <testcase classname="API de Viagem - Cálculos (Equipe 2) deve retornar erro 400 se campos obrigatórios estiverem faltando" name="API de Viagem - Cálculos (Equipe 2) deve retornar erro 400 se campos obrigatórios estiverem faltando" time="0.006">
    </testcase>
    <testcase classname="API de Viagem - Cálculos (Equipe 2) deve retornar erro 400 se diasEstadia for zero ou negativo" name="API de Viagem - Cálculos (Equipe 2) deve retornar erro 400 se diasEstadia for zero ou negativo" time="0.003">
    </testcase>
    <testcase classname="API de Viagem - Cálculos (Equipe 2) deve retornar erro 400 se o país não estiver na lista" name="API de Viagem - Cálculos (Equipe 2) deve retornar erro 400 se o país não estiver na lista" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Teste de Funções Base" errors="0" failures="0" skipped="0" timestamp="2025-05-26T21:01:01" time="0.245" tests="23">
    <testcase classname="Teste de Funções Base Aplicar desconto com valor maior que desconto" name="Teste de Funções Base Aplicar desconto com valor maior que desconto" time="0">
    </testcase>
    <testcase classname="Teste de Funções Base Aplicar desconto com valor igual ao desconto" name="Teste de Funções Base Aplicar desconto com valor igual ao desconto" time="0">
    </testcase>
    <testcase classname="Teste de Funções Base Aplicar desconto com desconto maior que valor" name="Teste de Funções Base Aplicar desconto com desconto maior que valor" time="0">
    </testcase>
    <testcase classname="Teste de Funções Base Calcula custo básico de container 20ft" name="Teste de Funções Base Calcula custo básico de container 20ft" time="0">
    </testcase>
    <testcase classname="Teste de Funções Base Calcula custo de container 40ft com acabamento intermediário" name="Teste de Funções Base Calcula custo de container 40ft com acabamento intermediário" time="0.001">
    </testcase>
    <testcase classname="Teste de Funções Base Calcula custo com valores padrão para parâmetros opcionais" name="Teste de Funções Base Calcula custo com valores padrão para parâmetros opcionais" time="0">
    </testcase>
    <testcase classname="Teste do BaseController datetime retorna data e hora ISO" name="Teste do BaseController datetime retorna data e hora ISO" time="0.002">
    </testcase>
    <testcase classname="Teste do BaseController data retorna data e hora ISO" name="Teste do BaseController data retorna data e hora ISO" time="0.001">
    </testcase>
    <testcase classname="Teste do BaseController concat retorna valor concatenado com frase fixa" name="Teste do BaseController concat retorna valor concatenado com frase fixa" time="0.001">
    </testcase>
    <testcase classname="Teste do BaseController concat retorna erro quando valor não é fornecido" name="Teste do BaseController concat retorna erro quando valor não é fornecido" time="0.001">
    </testcase>
    <testcase classname="Teste do BaseController calcularCustoCasaContainer calcula o custo total" name="Teste do BaseController calcularCustoCasaContainer calcula o custo total" time="0.001">
    </testcase>
    <testcase classname="Teste do BaseController calcularCustoCasaContainer retorna erro em caso de falha" name="Teste do BaseController calcularCustoCasaContainer retorna erro em caso de falha" time="0.001">
    </testcase>
    <testcase classname="Teste do UserController listUsers retorna dados do usuário" name="Teste do UserController listUsers retorna dados do usuário" time="0.001">
    </testcase>
    <testcase classname="Teste do UserController getUserById retorna usuário pelo ID" name="Teste do UserController getUserById retorna usuário pelo ID" time="0">
    </testcase>
    <testcase classname="Teste do UserController createUser retorna mensagem de criação" name="Teste do UserController createUser retorna mensagem de criação" time="0">
    </testcase>
    <testcase classname="Teste de Integração das Rotas e Servidor GET /datetime retorna data e hora" name="Teste de Integração das Rotas e Servidor GET /datetime retorna data e hora" time="0.009">
    </testcase>
    <testcase classname="Teste de Integração das Rotas e Servidor GET /data retorna data e hora" name="Teste de Integração das Rotas e Servidor GET /data retorna data e hora" time="0.004">
    </testcase>
    <testcase classname="Teste de Integração das Rotas e Servidor POST /concat retorna valor concatenado" name="Teste de Integração das Rotas e Servidor POST /concat retorna valor concatenado" time="0.012">
    </testcase>
    <testcase classname="Teste de Integração das Rotas e Servidor POST /calcular-custo-casa-container calcula custo" name="Teste de Integração das Rotas e Servidor POST /calcular-custo-casa-container calcula custo" time="0.004">
    </testcase>
    <testcase classname="Teste de Integração das Rotas e Servidor GET /users retorna lista de usuários" name="Teste de Integração das Rotas e Servidor GET /users retorna lista de usuários" time="0.004">
    </testcase>
    <testcase classname="Teste de Integração das Rotas e Servidor GET /users/:id retorna usuário pelo ID" name="Teste de Integração das Rotas e Servidor GET /users/:id retorna usuário pelo ID" time="0.003">
    </testcase>
    <testcase classname="Teste de Integração das Rotas e Servidor POST /users cria um novo usuário" name="Teste de Integração das Rotas e Servidor POST /users cria um novo usuário" time="0.003">
    </testcase>
    <testcase classname="Teste de Integração das Rotas e Servidor POST /calcular-custo-casa-container retorna erro com parâmetros inválidos" name="Teste de Integração das Rotas e Servidor POST /calcular-custo-casa-container retorna erro com parâmetros inválidos" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Classe ICMS" errors="0" failures="0" skipped="0" timestamp="2025-05-26T21:01:01" time="0.068" tests="23">
    <testcase classname="Classe ICMS Deve calcular corretamente o valor do ICMS" name="Classe ICMS Deve calcular corretamente o valor do ICMS" time="0.001">
    </testcase>
    <testcase classname="Classe ICMS toJSON deve retornar o objeto esperado" name="Classe ICMS toJSON deve retornar o objeto esperado" time="0">
    </testcase>
    <testcase classname="Classe ICMS Deve retornar erro se valor_produto ou aliquota_icms não forem informados" name="Classe ICMS Deve retornar erro se valor_produto ou aliquota_icms não forem informados" time="0">
    </testcase>
    <testcase classname="Classe ICMS Deve retornar erro se valor_produto ou aliquota_icms não forem números" name="Classe ICMS Deve retornar erro se valor_produto ou aliquota_icms não forem números" time="0">
    </testcase>
    <testcase classname="Classe ICMS Deve retornar erro se valor_produto ou aliquota_icms forem negativos" name="Classe ICMS Deve retornar erro se valor_produto ou aliquota_icms forem negativos" time="0">
    </testcase>
    <testcase classname="Classe ICMS Deve retornar erro se valor_produto ou aliquota_icms forem zero" name="Classe ICMS Deve retornar erro se valor_produto ou aliquota_icms forem zero" time="0">
    </testcase>
    <testcase classname="Classe IPI Deve calcular corretamente o valor do IPI" name="Classe IPI Deve calcular corretamente o valor do IPI" time="0.001">
    </testcase>
    <testcase classname="Classe IPI toJSON deve retornar o objeto esperado" name="Classe IPI toJSON deve retornar o objeto esperado" time="0">
    </testcase>
    <testcase classname="Classe IPI Deve calcular IPI corretamente com quantidade maior que 1" name="Classe IPI Deve calcular IPI corretamente com quantidade maior que 1" time="0.001">
    </testcase>
    <testcase classname="Classe IPI Deve retornar erro se valor_produto ou aliquota_ipi não forem informados" name="Classe IPI Deve retornar erro se valor_produto ou aliquota_ipi não forem informados" time="0">
    </testcase>
    <testcase classname="Classe IPI Deve retornar erro se valor_produto ou aliquota_ipi não forem números" name="Classe IPI Deve retornar erro se valor_produto ou aliquota_ipi não forem números" time="0">
    </testcase>
    <testcase classname="Classe IPI Deve retornar erro se valor_produto ou aliquota_ipi forem negativos" name="Classe IPI Deve retornar erro se valor_produto ou aliquota_ipi forem negativos" time="0">
    </testcase>
    <testcase classname="Classe IPI Deve retornar erro se valor_produto ou aliquota_ipi forem zero" name="Classe IPI Deve retornar erro se valor_produto ou aliquota_ipi forem zero" time="0">
    </testcase>
    <testcase classname="Função getICMS Deve calcular corretamente o ICMS com parâmetros válidos" name="Função getICMS Deve calcular corretamente o ICMS com parâmetros válidos" time="0.001">
    </testcase>
    <testcase classname="Função getICMS Deve retornar erro quando parâmetros obrigatórios não são informados" name="Função getICMS Deve retornar erro quando parâmetros obrigatórios não são informados" time="0">
    </testcase>
    <testcase classname="Função getICMS Deve retornar erro quando parâmetros inválidos são fornecidos" name="Função getICMS Deve retornar erro quando parâmetros inválidos são fornecidos" time="0">
    </testcase>
    <testcase classname="Função calcularPisCofins Deve calcular corretamente PIS/COFINS no regime cumulativo" name="Função calcularPisCofins Deve calcular corretamente PIS/COFINS no regime cumulativo" time="0.001">
    </testcase>
    <testcase classname="Função calcularPisCofins Deve calcular corretamente PIS/COFINS no regime não-cumulativo" name="Função calcularPisCofins Deve calcular corretamente PIS/COFINS no regime não-cumulativo" time="0">
    </testcase>
    <testcase classname="Função calcularPisCofins Deve aplicar o fator de alíquota corretamente" name="Função calcularPisCofins Deve aplicar o fator de alíquota corretamente" time="0.001">
    </testcase>
    <testcase classname="Função calcularPisCofins Deve retornar erro quando parâmetros obrigatórios não são informados" name="Função calcularPisCofins Deve retornar erro quando parâmetros obrigatórios não são informados" time="0">
    </testcase>
    <testcase classname="Função getNotaFiscal Deve retornar nota fiscal válida com parâmetros corretos" name="Função getNotaFiscal Deve retornar nota fiscal válida com parâmetros corretos" time="0.001">
    </testcase>
    <testcase classname="Função getNotaFiscal Deve retornar erro quando parâmetros estão ausentes" name="Função getNotaFiscal Deve retornar erro quando parâmetros estão ausentes" time="0">
    </testcase>
    <testcase classname="Função getNotaFiscal Deve retornar erro quando parâmetros são inválidos" name="Função getNotaFiscal Deve retornar erro quando parâmetros são inválidos" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Texte exemplo" errors="0" failures="0" skipped="0" timestamp="2025-05-26T21:01:01" time="0.047" tests="1">
    <testcase classname="Texte exemplo Aplicar desconto" name="Texte exemplo Aplicar desconto" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Texte exemplo" errors="0" failures="0" skipped="0" timestamp="2025-05-26T21:01:01" time="0.04" tests="1">
    <testcase classname="Texte exemplo Aplicar desconto" name="Texte exemplo Aplicar desconto" time="0.001">
<testsuites name="jest tests" tests="2" failures="0" errors="0" time="0.47">
  <testsuite name="Teste de login" errors="0" failures="0" skipped="0" timestamp="2025-05-27T01:31:16" time="0.387" tests="2">
    <testcase classname="Teste de login Tentar fazer login com sucesso" name="Teste de login Tentar fazer login com sucesso" time="0.018">
    </testcase>
    <testcase classname="Teste de login Tentar fazer login com falha" name="Teste de login Tentar fazer login com falha" time="0.002">
    </testcase>
  </testsuite>
</testsuites>